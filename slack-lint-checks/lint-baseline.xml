<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.11.0-alpha03" type="baseline" client="gradle" dependencies="false" name="AGP (8.11.0-alpha03)" variant="all" version="8.11.0-alpha03">

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {operator fun contains(element: E): kotlin.Boolean}, extensions {operator fun &lt;@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable&lt;T>.contains(element: T): kotlin.Boolean}"
        errorLine1="    if (isEnabled &amp;&amp; applicableAnnotations().contains(annotationInfo.qualifiedName)) {"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/AnnotatedClassOrMethodUsageDetector.kt"
            line="44"
            column="22"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {@kotlin.SinceKotlin(version = &quot;1.1&quot;)&#xA;@kotlin.internal.PlatformDependent&#xA;fun getOrDefault(key: K, defaultValue: V): V}, extensions {@kotlin.SinceKotlin(version = &quot;1.2&quot;)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun &lt;@kotlin.internal.OnlyInputTypes K, V> kotlin.collections.Map&lt;out K, V>.getOrDefault(key: K, defaultValue: V): V}"
        errorLine1="            typeConfig.functionEntries.getOrDefault(functionName, emptyList()) +"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/denylistedapis/DenyListedApiDetector.kt"
            line="114"
            column="13"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {@kotlin.SinceKotlin(version = &quot;1.1&quot;)&#xA;@kotlin.internal.PlatformDependent&#xA;fun getOrDefault(key: K, defaultValue: V): V}, extensions {@kotlin.SinceKotlin(version = &quot;1.2&quot;)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun &lt;@kotlin.internal.OnlyInputTypes K, V> kotlin.collections.Map&lt;out K, V>.getOrDefault(key: K, defaultValue: V): V}"
        errorLine1="              typeConfig.functionEntries.getOrDefault(MatchAll, emptyList())"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/denylistedapis/DenyListedApiDetector.kt"
            line="115"
            column="15"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {@kotlin.SinceKotlin(version = &quot;1.1&quot;)&#xA;@kotlin.internal.PlatformDependent&#xA;fun getOrDefault(key: K, defaultValue: V): V}, extensions {@kotlin.SinceKotlin(version = &quot;1.2&quot;)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun &lt;@kotlin.internal.OnlyInputTypes K, V> kotlin.collections.Map&lt;out K, V>.getOrDefault(key: K, defaultValue: V): V}"
        errorLine1="            typeConfig.referenceEntries.getOrDefault(referenceName, emptyList()) +"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/denylistedapis/DenyListedApiDetector.kt"
            line="148"
            column="13"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {@kotlin.SinceKotlin(version = &quot;1.1&quot;)&#xA;@kotlin.internal.PlatformDependent&#xA;fun getOrDefault(key: K, defaultValue: V): V}, extensions {@kotlin.SinceKotlin(version = &quot;1.2&quot;)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun &lt;@kotlin.internal.OnlyInputTypes K, V> kotlin.collections.Map&lt;out K, V>.getOrDefault(key: K, defaultValue: V): V}"
        errorLine1="              typeConfig.referenceEntries.getOrDefault(MatchAll, emptyList())"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/denylistedapis/DenyListedApiDetector.kt"
            line="149"
            column="15"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {operator fun contains(element: E): kotlin.Boolean}, extensions {operator fun &lt;@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable&lt;T>.contains(element: T): kotlin.Boolean}"
        errorLine1="    if (isEnabled &amp;&amp; applicableAnnotations().contains(annotationInfo.qualifiedName)) {"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DeprecatedAnnotationDetector.kt"
            line="43"
            column="22"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(issue.getBriefDescription(TextFormat.TEXT))"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="87"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(&quot; Matched string is &apos;&quot;)"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="88"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(matched)"
        errorLine2="          ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="89"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(&quot;&apos; in &quot;)"
        errorLine2="          ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="90"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(type)"
        errorLine2="          ~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="91"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(&quot; name &apos;&quot;)"
        errorLine2="          ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="92"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(name)"
        errorLine2="          ~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="93"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(&quot;&apos;&quot;)"
        errorLine2="          ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingChecker.kt"
            line="94"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          message.append(&quot;, see its documentation for details.&quot;)"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="221"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(str: kotlin.String?): java.lang.StringBuilder?, open fun append(s: kotlin.CharSequence?): java.lang.StringBuilder?}, extensions {fun &lt;T : kotlin.text.Appendable> T.append(vararg value: kotlin.CharSequence?): T, @kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.String?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          message.append(&quot;: $javaOnlyMessage&quot;)"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="223"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {@jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun toString(): kotlin.String}, extensions {fun kotlin.Any?.toString(): kotlin.String}"
        errorLine1="        context.report(ISSUE, context.getLocation(this), message.toString())"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="225"
            column="58"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(c: kotlin.Char): java.lang.StringBuilder?}, extensions {@kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(c.uppercaseChar())"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="157"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(c: kotlin.Char): java.lang.StringBuilder?}, extensions {@kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(c)"
        errorLine2="          ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="160"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(c: kotlin.Char): java.lang.StringBuilder?}, extensions {@kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(&apos;_&apos;)"
        errorLine2="          ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="188"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(c: kotlin.Char): java.lang.StringBuilder?}, extensions {@kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="            append(&apos;_&apos;)"
        errorLine2="            ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="194"
            column="13"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(c: kotlin.Char): java.lang.StringBuilder?}, extensions {@kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(c)"
        errorLine2="          ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="196"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {open fun append(obj: kotlin.Any?): java.lang.StringBuilder?, @jdk.internal.vm.annotation.IntrinsicCandidate&#xA;open fun append(c: kotlin.Char): java.lang.StringBuilder?}, extensions {@kotlin.Deprecated(message = &quot;Use append(value: Any?) instead&quot;, replaceWith = kotlin/ReplaceWith(expression = &quot;append(value = obj)&quot;, , imports = [], ), level = kotlin.DeprecationLevel.WARNING)&#xA;@kotlin.internal.InlineOnly&#xA;inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder, fun kotlin.text.StringBuilder.append(vararg value: kotlin.Any?): kotlin.text.StringBuilder}"
        errorLine1="          append(c.uppercaseChar())"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="199"
            column="11"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(ViewContextDetector.issues)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="40"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(ArgInFormattedQuantityStringResDetector.issues)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="41"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(DaggerIssuesDetector.ISSUES)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="42"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(NonKotlinPairDetector.issues)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="43"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(InclusiveNamingChecker.ISSUES)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="45"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(GuavaPreconditionsDetector.issues)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="53"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(MockDetector.ALL_ISSUES)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="54"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(MoshiUsageDetector.issues())"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="56"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(FragmentDaggerFieldInjectionDetector.issues)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="57"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(RedactedUsageDetector.ISSUES)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="58"
            column="5"/>
    </issue>

    <issue
        id="MemberExtensionConflict"
        message="Conflict applicable candidates of member and extension: members {fun addAll(elements: kotlin.collections.Collection&lt;E>): kotlin.Boolean}, extensions {fun &lt;T> kotlin.collections.MutableCollection&lt;in T>.addAll(elements: kotlin.collections.Iterable&lt;T>): kotlin.Boolean}"
        errorLine1="    addAll(DenyListedApiDetector.ISSUES)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SlackIssueRegistry.kt"
            line="67"
            column="5"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  @Test"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/DeprecatedSqlUsageDetectorTest.kt"
            line="16"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  @Test"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/resources/FullyQualifiedResourceDetectorTest.kt"
            line="25"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  @Test"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/resources/MissingResourceImportAliasDetectorTest.kt"
            line="24"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  @Test"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/mocking/MockDetectorOptionsTest.kt"
            line="27"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  private fun testFiles() ="
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/MoshiUsageDetectorTest.kt"
            line="2077"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  private fun testViolatingExpressionLeft(markPoint: String) {"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/text/SpanMarkPointMissingMaskDetectorTest.kt"
            line="58"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  @Test"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/ViewContextDetectorTest.kt"
            line="16"
            column="3"/>
    </issue>

    <issue
        id="LintDocExample"
        message="Expected to also find a documentation example test (`testDocumentationExample`) which shows a simple, typical scenario which triggers the test, and which will be extracted into lint&apos;s per-issue documentation pages"
        errorLine1="  @Test"
        errorLine2="  ^">
        <location
            file="src/test/java/slack/lint/resources/WrongResourceImportAliasDetectorTest.kt"
            line="24"
            column="3"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        &quot;Count value in formatted string resource.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="31"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        BRIEF_DESCRIPTION_PREFIX_DEFAULT + BRIEF_DESCRIPTION_SUFFIX,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DeprecatedAnnotationDetector.kt"
            line="64"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Dagger provider methods should not be called directly by user code.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DoNotCallProvidersDetector.kt"
            line="27"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;EitherNet&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`EitherNet\`"
        errorLine1="            message = &quot;Repository APIs should not expose EitherNet types directly.&quot;,"
        errorLine2="                                                         ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/eithernet/DoNotExposeEitherNetInRepositoriesDetector.kt"
            line="86"
            column="58"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Single sentence error messages should not end with a period"
        errorLine1="            message = &quot;Repository APIs should not expose EitherNet types directly.&quot;,"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/eithernet/DoNotExposeEitherNetInRepositoriesDetector.kt"
            line="86"
            column="24"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        briefDescription = &quot;Repository APIs should not expose EitherNet types directly.&quot;,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/eithernet/DoNotExposeEitherNetInRepositoriesDetector.kt"
            line="108"
            column="29"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;EitherNet&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`EitherNet\`"
        errorLine1="          &quot;EitherNet (and networking in general) should be an implementation detail of the repository layer.&quot;,"
        errorLine2="           ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/eithernet/DoNotExposeEitherNetInRepositoriesDetector.kt"
            line="110"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        &quot;Use Slack&apos;s internal `@DoNotMock` annotation.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/mocking/ErrorProneDoNotMockDetector.kt"
            line="25"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="          &quot;Fragment dependencies should be injected using constructor injections only.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="68"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="          &quot;Fragment dependencies should be injected using constructor injections only.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="68"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="          &quot;Fragment dependencies should be injected using the Fragment&apos;s constructor.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="85"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="          &quot;Fragment dependencies should be injected using the Fragment&apos;s constructor.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="85"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="          &quot;Resources should use an import alias instead of being fully qualified.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/resources/FullyQualifiedResourceDetector.kt"
            line="152"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Multi-line issue explanation strings will interpret line separators as hard breaks, and this looks like a continuation of the same paragraph. Consider using \ at the end of the previous line to indicate that the lines should be joined, or add a blank line between unrelated sentences, or suppress this issue type here."
        errorLine1="            &quot;import slack.l10n.R as L10nR\n&quot; +"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/resources/FullyQualifiedResourceDetector.kt"
            line="154"
            column="14"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;...getString(L10nR.string.app_name)&quot; looks like a call; surround with backtics in string to display as symbol, e.g. \`...getString(L10nR.string.app_name)\`"
        errorLine1="            &quot;...getString(L10nR.string.app_name)&quot;,"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/resources/FullyQualifiedResourceDetector.kt"
            line="156"
            column="14"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Use Slack&apos;s JavaPreconditions instead of Guava&apos;s Preconditions checks&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="127"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Use Slack&apos;s JavaPreconditions instead of Guava&apos;s Preconditions checks&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="127"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Kotlin precondition checks should use the Kotlin standard library checks&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="140"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Kotlin precondition checks should use the Kotlin standard library checks&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="140"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Only Kotlin classes should be injected in order for Anvil to work.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/InjectInJavaDetector.kt"
            line="65"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        MESSAGE_LINT_ERROR_TITLE,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="53"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        &quot;Use slack.foundation.coroutines.android.MainScope.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MainScopeUsageDetector.kt"
            line="38"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="          &quot;Missing import alias for R class.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/resources/MissingResourceImportAliasDetector.kt"
            line="145"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Single sentence error messages should not end with a period"
        errorLine1="        &quot;Name &apos;$jsonName&apos; is duplicated by member &apos;${existingMember.name}&apos;.&quot;,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="855"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Single sentence error messages should not end with a period"
        errorLine1="        &quot;Name &apos;$jsonName&apos; is duplicated by member &apos;${member.name}&apos;.&quot;,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="860"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Calls to @MustUseNamedParams-annotated methods must name all parameters.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MustUseNamedParamsDetector.kt"
            line="58"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;MustUseNamedParams&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`MustUseNamedParams\`"
        errorLine1="        &quot;Calls to @MustUseNamedParams-annotated methods must name all parameters.&quot;,"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MustUseNamedParamsDetector.kt"
            line="59"
            column="20"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Use Kotlin&apos;s $FQN_KOTLIN_PAIR instead of other Pair types from other libraries like AndroidX and Slack commons&quot;,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NonKotlinPairDetector.kt"
            line="95"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Use Kotlin&apos;s $FQN_KOTLIN_PAIR instead of other Pair types from other libraries like AndroidX and Slack commons&quot;,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NonKotlinPairDetector.kt"
            line="95"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;ConcurrentHashMap&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`ConcurrentHashMap\`"
        errorLine1="          context.report(ISSUE, location, &quot;ConcurrentHashMap should not use nullable $name types&quot;)"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NullableConcurrentHashMapDetector.kt"
            line="65"
            column="44"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;ConcurrentHashMap&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`ConcurrentHashMap\`"
        errorLine1="          context.report(ISSUE, location, &quot;ConcurrentHashMap should not use nullable $name types&quot;)"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NullableConcurrentHashMapDetector.kt"
            line="111"
            column="44"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;ConcurrentHashMap&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`ConcurrentHashMap\`"
        errorLine1="        ConcurrentHashMap does not support null keys or values. \"
        errorLine2="        ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NullableConcurrentHashMapDetector.kt"
            line="137"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        &quot;Use SlackDispatchers.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/RawDispatchersUsageDetector.kt"
            line="40"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        &quot;Methods annotated with @RestrictedCallsTo should only be called from the specified scope.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/RestrictCallsToDetector.kt"
            line="27"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;ok&quot; is usually capitalized as &quot;OK&quot;"
        errorLine1="          ok."
        errorLine2="          ~~">
        <location
            file="src/main/java/slack/lint/RestrictCallsToDetector.kt"
            line="31"
            column="11"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        &quot;This is replaced by the caller.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/retrofit/RetrofitUsageDetector.kt"
            line="176"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        briefDescription = &quot;subscribeOn called with the main thread scheduler.&quot;,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="43"
            column="29"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be capitalized"
        errorLine1="        briefDescription = &quot;subscribeOn called with the main thread scheduler.&quot;,"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="43"
            column="29"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Multi-line issue explanation strings will interpret line separators as hard breaks, and this looks like a continuation of the same paragraph. Consider using \ at the end of the previous line to indicate that the lines should be joined, or add a blank line between unrelated sentences, or suppress this issue type here."
        errorLine1="        on the main thread - that is, code above this line."
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="        &quot;Don&apos;t use Serializable.&quot;,"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SerializableDetector.kt"
            line="47"
            column="10"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="          &quot;Check that Span flags use the bitwise mask SPAN_POINT_MARK_MASK when being compared to.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/text/SpanMarkPointMissingMaskDetector.kt"
            line="31"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="          &quot;Wrong import alias for this R class.&quot;,"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/resources/WrongResourceImportAliasDetector.kt"
            line="127"
            column="12"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Multi-line issue explanation strings will interpret line separators as hard breaks, and this looks like a continuation of the same paragraph. Consider using \ at the end of the previous line to indicate that the lines should be joined, or add a blank line between unrelated sentences, or suppress this issue type here."
        errorLine1="            &quot;import slack.l10n.R as L10nR\n&quot; +"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/resources/WrongResourceImportAliasDetector.kt"
            line="129"
            column="14"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;UiKit&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`UiKit\`"
        errorLine1="            &quot;import slack.uikit.R as UiKitR&quot;,"
        errorLine2="                                     ~~~~~">
        <location
            file="src/main/java/slack/lint/resources/WrongResourceImportAliasDetector.kt"
            line="130"
            column="38"/>
    </issue>

    <issue
        id="LintImplUseUast"
        message="Don&apos;t call PsiField#getInitializer(); you must use UAST instead. If you don&apos;t have a UField call UastFacade.getInitializerBody(field)"
        errorLine1="      val assignment = variable?.initializer as? PsiMethodCallExpression"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="90"
            column="24"/>
    </issue>

    <issue
        id="LintImplUseUast"
        message="Don&apos;t call PsiField#getInitializer(); you must use UAST instead. If you don&apos;t have a UField call UastFacade.getInitializerBody(field)"
        errorLine1="              val initializer = reference.initializer"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="134"
            column="33"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="              containingClass.classKind == JvmClassKind.CLASS -> {"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DaggerIssuesDetector.kt"
            line="176"
            column="15"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="              containingClass.classKind == JvmClassKind.INTERFACE &amp;&amp; isProvides -> {"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DaggerIssuesDetector.kt"
            line="195"
            column="15"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="                  node.parameterList"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DaggerIssuesDetector.kt"
            line="212"
            column="19"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="            val nodeLocation = node.returnTypeElement ?: node"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DaggerIssuesDetector.kt"
            line="231"
            column="32"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          return containingClass.name?.endsWith(&quot;Repository&quot;) == true"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/eithernet/DoNotExposeEitherNetInRepositoriesDetector.kt"
            line="94"
            column="18"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="    constructors.any {"
        errorLine2="    ~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="56"
            column="5"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        checker.check(node, node.name, &quot;class&quot;)"
        errorLine2="                            ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingSourceCodeScanner.kt"
            line="52"
            column="29"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        val type = if (isKotlin(node.language)) &quot;function&quot; else &quot;method&quot;"
        errorLine2="                                ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingSourceCodeScanner.kt"
            line="57"
            column="33"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="              if (isKotlin(node.language)) {"
        errorLine2="                           ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/inclusive/InclusiveNamingSourceCodeScanner.kt"
            line="66"
            column="28"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          node.baseClassType.resolve()?.let { psiClass ->"
        errorLine2="          ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="91"
            column="11"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        return listOfNotNull(node.javaPsi.superClass, *node.interfaces)"
        errorLine2="                                                       ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="116"
            column="56"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="              val source = node.text"
        errorLine2="                           ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="121"
            column="28"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        return context.evaluator.getSuperMethod(node)?.let { method ->"
        errorLine2="                                                ~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="184"
            column="49"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="            val modifier = node.modifierList.children.joinToString(separator = &quot; &quot;) { it.text }"
        errorLine2="                           ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="192"
            column="28"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="  containingClass ?: return false"
        errorLine2="  ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="81"
            column="3"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="  if (isKotlin(language) &amp;&amp; evaluator.hasModifier(this, KtTokens.INNER_KEYWORD)) return true"
        errorLine2="               ~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="87"
            column="16"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="  if (language == KotlinLanguage.INSTANCE &amp;&amp; context.evaluator.isSuspend(this)) {"
        errorLine2="      ~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="293"
            column="7"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="    val classReference = parameterList.parameters.lastOrNull()?.type as? PsiClassType ?: return null"
        errorLine2="                         ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/LintUtils.kt"
            line="294"
            column="26"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        if (uClass.classKind in applicableClassKinds) {"
        errorLine2="            ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/MetadataJavaEvaluator.kt"
            line="165"
            column="13"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        if (cls.classKind in applicableClassKinds) {"
        errorLine2="            ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/util/MetadataJavaEvaluator.kt"
            line="192"
            column="13"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        if (isKotlin(node.language)) {"
        errorLine2="                     ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/mocking/MockDetector.kt"
            line="182"
            column="22"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        } else if (isJava(node.language) &amp;&amp; isMockAnnotated(node)) {"
        errorLine2="                          ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/mocking/MockDetector.kt"
            line="189"
            column="27"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        if (node.isEnum) {"
        errorLine2="            ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="76"
            column="13"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          slackEvaluator.isObject(node) ||"
        errorLine2="                                  ~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="199"
            column="35"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          if (slackEvaluator.isObject(node)) {"
        errorLine2="                                      ~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="206"
            column="39"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          node.constructors"
        errorLine2="          ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="234"
            column="11"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="                    .name(&quot;Make ${parameter.name} &apos;val&apos;&quot;)"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="303"
            column="35"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="                    .name(&quot;Make ${parameter.name} &apos;internal&apos;&quot;)"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="323"
            column="35"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        val typeLabelAnnotation = node.getAnnotation(FQCN_TYPE_LABEL)"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="446"
            column="35"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        val defaultObjectAnnotation = node.getAnnotation(FQCN_DEFAULT_OBJECT)"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="447"
            column="39"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        if (isTypeLabeled &amp;&amp; node.hasTypeParameters()) {"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="467"
            column="30"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          node.superTypes"
        errorLine2="          ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="483"
            column="11"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          &quot;Could not load class for ${psiType.className} on ${parameter.getUastParentOfType&lt;UClass>()!!.name}.${parameter.name}&quot;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="616"
            column="63"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          &quot;Could not load class for ${psiType.className} on ${parameter.getUastParentOfType&lt;UClass>()!!.name}.${parameter.name}&quot;"
        errorLine2="                                                                                                                ~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="616"
            column="113"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        jsonName == member.name -> {"
        errorLine2="                    ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="833"
            column="21"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        context.getNameLocation(member as PsiElement),"
        errorLine2="                                ~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="854"
            column="33"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        &quot;Name &apos;$jsonName&apos; is duplicated by member &apos;${member.name}&apos;.&quot;,"
        errorLine2="                                                     ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="860"
            column="54"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="    val isKotlin = isKotlin(node.language)"
        errorLine2="                            ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="912"
            column="29"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="    val unknownIndex = constants.indexOfFirst { it.name == &quot;UNKNOWN&quot; }"
        errorLine2="                                                ~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="1069"
            column="49"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        val jsonAnnotation = constant.getAnnotation(FQCN_JSON)"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="1087"
            column="30"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="      val name = constant.name"
        errorLine2="                 ~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="1115"
            column="18"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="          node.constructors"
        errorLine2="          ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/parcel/ParcelizeFunctionPropertyDetector.kt"
            line="40"
            column="11"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="            it.findSuperMethods()[0].toUElementOfType()"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/RestrictCallsToDetector.kt"
            line="76"
            column="13"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="              val currentText = node.text"
        errorLine2="                                ~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/retrofit/RetrofitUsageDetector.kt"
            line="93"
            column="33"/>
    </issue>

    <issue
        id="UElementAsPsi"
        message="Do not use `UElement` as `PsiElement`"
        errorLine1="        if (node.isEnum) return"
        errorLine2="            ~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SerializableDetector.kt"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`, `UElementWithLocation`"
        errorLine1="import org.jetbrains.uast.java.JavaUCallExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="19"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCompositeQualifiedExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.java.JavaUCompositeQualifiedExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="20"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="21"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="22"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCompositeQualifiedExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="            is JavaUCompositeQualifiedExpression ->"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="53"
            column="16"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`, `UElementWithLocation`"
        errorLine1="              checkCall { JavaUCallExpression::class.safeCast(arg.selector) }"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="54"
            column="27"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`, `UElementWithLocation`"
        errorLine1="            is JavaUCallExpression -> checkCall { arg }"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="55"
            column="16"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="            is KotlinUQualifiedReferenceExpression ->"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="56"
            column="16"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`"
        errorLine1="              checkCall { KotlinUFunctionCallExpression::class.safeCast(arg.selector) }"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="57"
            column="27"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`"
        errorLine1="            is KotlinUFunctionCallExpression -> checkCall { arg }"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="58"
            column="16"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUAnnotation is UAST implementation. Consider using one of its corresponding UAST interfaces: `UAnnotationEx`, `UAnnotation`, `UResolvable`, `UAnchorOwner`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUAnnotation"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="48"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUClassLiteralExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UClassLiteralExpression`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUClassLiteralExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="49"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUAnnotation is UAST implementation. Consider using one of its corresponding UAST interfaces: `UAnnotationEx`, `UAnnotation`, `UResolvable`, `UAnchorOwner`"
        errorLine1="                (annotationEntry.toUElement() as KotlinUAnnotation).takeIf {"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="363"
            column="50"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUClassLiteralExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UClassLiteralExpression`"
        errorLine1="      (adaptedByAnnotation.findAttributeValue(&quot;adapter&quot;) as? KotlinUClassLiteralExpression)"
        errorLine2="                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="545"
            column="62"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`, `UElementWithLocation`"
        errorLine1="import org.jetbrains.uast.java.JavaUCallExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="24"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCompositeQualifiedExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.java.JavaUCompositeQualifiedExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="25"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="26"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="27"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUSimpleReferenceExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `USimpleNameReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="import org.jetbrains.uast.kotlin.KotlinUSimpleReferenceExpression"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="28"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.psi.UastKotlinPsiVariable is UAST implementation. Consider using one of its corresponding UAST interfaces."
        errorLine1="import org.jetbrains.uast.kotlin.psi.UastKotlinPsiVariable"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="29"
            column="1"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCompositeQualifiedExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="      is JavaUCompositeQualifiedExpression ->"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="75"
            column="10"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`, `UElementWithLocation`"
        errorLine1="        checkCall { JavaUCallExpression::class.safeCast(arg.selector) }"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="76"
            column="21"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.java.JavaUCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`, `UElementWithLocation`"
        errorLine1="      is JavaUCallExpression -> checkCall { arg }"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="77"
            column="10"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUQualifiedReferenceExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UQualifiedReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="      is KotlinUQualifiedReferenceExpression ->"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="78"
            column="10"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`"
        errorLine1="        checkCall { KotlinUFunctionCallExpression::class.safeCast(arg.selector) }"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="79"
            column="21"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUFunctionCallExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `UCallExpression`, `UResolvable`"
        errorLine1="      is KotlinUFunctionCallExpression -> checkCall { arg }"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="80"
            column="10"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.KotlinUSimpleReferenceExpression is UAST implementation. Consider using one of its corresponding UAST interfaces: `UExpression`, `UAnnotated`, `USimpleNameReferenceExpression`, `UReferenceExpression`, `UResolvable`"
        errorLine1="      is KotlinUSimpleReferenceExpression -> {"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="126"
            column="10"/>
    </issue>

    <issue
        id="UastImplementation"
        message="org.jetbrains.uast.kotlin.psi.UastKotlinPsiVariable is UAST implementation. Consider using one of its corresponding UAST interfaces."
        errorLine1="            is UastKotlinPsiVariable -> { // The variable reference is local"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="133"
            column="16"/>
    </issue>

</issues>
