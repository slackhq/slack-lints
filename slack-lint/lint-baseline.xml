<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.1.2" type="baseline" client="gradle" dependencies="false" name="AGP (7.1.2)" variant="all" version="7.1.2">

    <issue
        id="LintImplIdFormat"
        message="Lint issue IDs should be reasonably short (&lt; 40 chars); they&apos;re used in suppress annotations etc"
        errorLine1="      &quot;InjectWithScopeRequiredLoggedInUserProvider&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/InjectWithUsageDetector.kt"
            line="97"
            column="8"/>
    </issue>

    <issue
        id="LintImplIdFormat"
        message="Lint issue IDs should be reasonably short (&lt; 40 chars); they&apos;re used in suppress annotations etc"
        errorLine1="      &quot;InjectWithTypeMustImplementAnvilInjectable&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/InjectWithUsageDetector.kt"
            line="107"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;Count value in formatted string resource.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="43"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;AutoValue classes represent pure data classes, so mocking them should not be necessary.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/mocking/AutoValueMockDetector.kt"
            line="31"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;@Binds-annotated functions can be extension functions.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DaggerKotlinIssuesDetector.kt"
            line="74"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;@Binds-annotated functions can be extension functions.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DaggerKotlinIssuesDetector.kt"
            line="74"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;data classes represent pure data classes, so mocking them should not be necessary.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/mocking/DataClassMockDetector.kt"
            line="31"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="        BRIEF_DESCRIPTION_PREFIX_DEFAULT + BRIEF_DESCRIPTION_SUFFIX,"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DeprecatedAnnotationDetector.kt"
            line="84"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Dagger provider methods should not be called directly by user code.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/DoNotCallProvidersDetector.kt"
            line="53"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;Use Slack&apos;s internal `@DoNotMock` annotation.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/mocking/ErrorProneDoNotMockDetector.kt"
            line="37"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      briefDescription = &quot;Fragment dependencies should be injected using constructor injections only.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="78"
            column="27"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      briefDescription = &quot;Fragment dependencies should be injected using constructor injections only.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="78"
            column="27"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      briefDescription = &quot;Fragment dependencies should be injected using the Fragment&apos;s constructor.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="92"
            column="27"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      briefDescription = &quot;Fragment dependencies should be injected using the Fragment&apos;s constructor.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/FragmentDaggerFieldInjectionDetector.kt"
            line="92"
            column="27"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Use Slack&apos;s JavaPreconditions instead of Guava&apos;s Preconditions checks&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="131"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Use Slack&apos;s JavaPreconditions instead of Guava&apos;s Preconditions checks&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="131"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Kotlin precondition checks should use the Kotlin standard library checks&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="143"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Kotlin precondition checks should use the Kotlin standard library checks&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/GuavaPreconditionsDetector.kt"
            line="143"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Only Kotlin classes should be injected in order for Anvil to work.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/InjectInJavaDetector.kt"
            line="75"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;@InjectWith-annotated classes must implement LoggedInUserProvider (or extend something that does) if they target UserScope or OrgScope.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/InjectWithUsageDetector.kt"
            line="98"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;@InjectWith-annotated classes must implement AnvilInjectable (or extend something that does).&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/InjectWithUsageDetector.kt"
            line="108"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      MESSAGE_LINT_ERROR_TITLE,"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/JavaOnlyDetector.kt"
            line="65"
            column="7"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;Use slack.foundation.coroutines.android.MainScope.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MainScopeUsageDetector.kt"
            line="52"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Single sentence error messages should not end with a period"
        errorLine1="        &quot;Name &apos;$jsonName&apos; is duplicated by member &apos;${existingMember.name}&apos;.&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="833"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="Single sentence error messages should not end with a period"
        errorLine1="        &quot;Name &apos;$jsonName&apos; is duplicated by member &apos;${member.name}&apos;.&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MoshiUsageDetector.kt"
            line="838"
            column="9"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Calls to @MustUseNamedParams-annotated methods must name all parameters.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MustUseNamedParamsDetector.kt"
            line="68"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;MustUseNamedParams&quot; looks like a code reference; surround with backtics in string to display as symbol, e.g. \`MustUseNamedParams\`"
        errorLine1="      &quot;Calls to @MustUseNamedParams-annotated methods must name all parameters.&quot;,"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/MustUseNamedParamsDetector.kt"
            line="69"
            column="18"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Use Kotlin&apos;s $FQN_KOTLIN_PAIR instead of other Pair types from other libraries like AndroidX and Slack commons&quot;,"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NonKotlinPairDetector.kt"
            line="105"
            column="7"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Use Kotlin&apos;s $FQN_KOTLIN_PAIR instead of other Pair types from other libraries like AndroidX and Slack commons&quot;,"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/NonKotlinPairDetector.kt"
            line="105"
            column="7"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;Use SlackDispatchers.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/RawDispatchersUsageDetector.kt"
            line="54"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      &quot;Methods annotated with @RestrictedCallsTo should only be called from the specified scope.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/RestrictCallsToDetector.kt"
            line="39"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="&quot;ok&quot; is usually capitalized as &quot;OK&quot;"
        errorLine1="          ok."
        errorLine2="          ~~">
        <location
            file="src/main/java/slack/lint/RestrictCallsToDetector.kt"
            line="43"
            column="11"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;This is replaced by the caller.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/retrofit/RetrofitUsageDetector.kt"
            line="173"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      briefDescription = &quot;subscribeOn called with the main thread scheduler.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="54"
            column="27"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be capitalized"
        errorLine1="      briefDescription = &quot;subscribeOn called with the main thread scheduler.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="54"
            column="27"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should *not* end with a period (think of it as a headline)"
        errorLine1="      &quot;Don&apos;t use Serializable.&quot;,"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/SerializableDetector.kt"
            line="58"
            column="8"/>
    </issue>

    <issue
        id="LintImplTextFormat"
        message="The issue summary should be shorter; typically just a 3-6 words; it&apos;s used as a topic header in HTML reports and in the IDE inspections window"
        errorLine1="      briefDescription = &quot;Check that Span flags use the bitwise mask SPAN_POINT_MARK_MASK when being compared to.&quot;,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/text/SpanMarkPointMissingMaskDetector.kt"
            line="42"
            column="27"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="93"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="140"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="207"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="265"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="318"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="365"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="446"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `java()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/FragmentDaggerFieldInjectionDetectorTest.kt"
            line="493"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/MainScopeUsageDetectorTest.kt"
            line="55"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/MainScopeUsageDetectorTest.kt"
            line="94"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/RawDispatchersUsageDetectorTest.kt"
            line="78"
            column="15"/>
    </issue>

    <issue
        id="LintImplTrimIndent"
        message="No need to call `.trimIndent()` in issue registration strings; they are already trimmed by indent by lint when displaying to users. Instead, call `.indented()` on the surrounding `kotlin()` test file construction"
        errorLine1="          &quot;&quot;&quot;.trimIndent()"
        errorLine2="              ~~~~~~~~~~~~">
        <location
            file="src/test/java/slack/lint/RawDispatchersUsageDetectorTest.kt"
            line="138"
            column="15"/>
    </issue>

    <issue
        id="LintImplUseUast"
        message="Don&apos;t call PsiField#getInitializer(); you must use UAST instead. If you don&apos;t have a UField call UastFacade.getInitializerBody(field)"
        errorLine1="      val assignment = variable?.initializer as? PsiMethodCallExpression"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/ArgInFormattedQuantityStringResDetector.kt"
            line="98"
            column="24"/>
    </issue>

    <issue
        id="LintImplUseUast"
        message="Don&apos;t call PsiField#getInitializer(); you must use UAST instead. If you don&apos;t have a UField call UastFacade.getInitializerBody(field)"
        errorLine1="      is PsiField -> variable.initializer as? PsiMethodCallExpression"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="151"
            column="22"/>
    </issue>

    <issue
        id="LintImplUseUast"
        message="Don&apos;t call PsiField#getInitializer(); you must use UAST instead. If you don&apos;t have a UField call UastFacade.getInitializerBody(field)"
        errorLine1="      is PsiLocalVariable -> variable.initializer as? PsiMethodCallExpression"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/slack/lint/rx/RxSubscribeOnMainDetector.kt"
            line="152"
            column="30"/>
    </issue>

</issues>
